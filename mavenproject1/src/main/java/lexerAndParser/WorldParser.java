
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lexerAndParser;

import java_cup.runtime.Symbol;
import Objects.*;
import java.util.ArrayList;
import java.util.List;
import control.ValidarControl;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class WorldParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return WorldParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public WorldParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public WorldParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public WorldParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\051\013\000\002\052\013\000\002\004\007\000" +
    "\002\005\005\000\002\005\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\036\011\000" +
    "\002\042\011\000\002\041\011\000\002\006\011\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\013\011\000" +
    "\002\014\011\000\002\015\011\000\002\016\011\000\002" +
    "\017\011\000\002\020\011\000\002\021\011\000\002\022" +
    "\011\000\002\023\005\000\002\023\003\000\002\024\007" +
    "\000\002\025\007\000\002\026\005\000\002\026\005\000" +
    "\002\033\011\000\002\034\005\000\002\034\003\000\002" +
    "\035\005\000\002\030\011\000\002\031\005\000\002\031" +
    "\003\000\002\032\005\000\002\027\011\000\002\040\005" +
    "\000\002\040\005\000\002\040\003\000\002\043\011\000" +
    "\002\043\007\000\002\044\011\000\002\044\007\000\002" +
    "\045\005\000\002\045\005\000\002\045\003\000\002\045" +
    "\003\000\002\046\005\000\002\046\005\000\002\046\003" +
    "\000\002\047\004\000\002\047\003\000\002\050\003\000" +
    "\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\047\006\001\002\000\004\002\334\001" +
    "\002\000\004\002\ufffe\001\002\000\004\044\315\001\002" +
    "\000\006\002\ufffc\047\013\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffd\001\002" +
    "\000\004\044\016\001\002\000\004\034\ufff7\001\002\000" +
    "\004\034\ufff6\001\002\000\010\004\044\005\036\006\037" +
    "\001\002\000\004\034\022\001\002\000\004\034\ufff5\001" +
    "\002\000\004\034\ufff4\001\002\000\004\044\032\001\002" +
    "\000\006\034\ufff1\050\ufff1\001\002\000\006\034\uffef\050" +
    "\uffef\001\002\000\006\034\312\050\ufff2\001\002\000\006" +
    "\034\uffee\050\uffee\001\002\000\006\034\ufff0\050\ufff0\001" +
    "\002\000\004\034\ufff8\001\002\000\006\034\uffed\050\uffed" +
    "\001\002\000\022\004\044\005\036\006\037\010\035\024" +
    "\042\027\041\031\043\032\040\001\002\000\004\050\034" +
    "\001\002\000\006\002\ufff9\047\ufff9\001\002\000\004\044" +
    "\220\001\002\000\004\044\213\001\002\000\004\044\206" +
    "\001\002\000\004\044\201\001\002\000\004\044\166\001" +
    "\002\000\004\044\137\001\002\000\004\044\052\001\002" +
    "\000\004\044\045\001\002\000\004\033\046\001\002\000" +
    "\004\044\047\001\002\000\004\023\050\001\002\000\004" +
    "\044\051\001\002\000\004\034\uffec\001\002\000\004\033" +
    "\053\001\002\000\004\045\054\001\002\000\004\047\056" +
    "\001\002\000\006\034\135\046\uffcb\001\002\000\006\043" +
    "\062\044\063\001\002\000\004\046\060\001\002\000\006" +
    "\034\uffcd\050\uffcd\001\002\000\004\034\132\001\002\000" +
    "\006\034\uffc6\050\uffc6\001\002\000\006\025\123\026\071" +
    "\001\002\000\004\050\122\001\002\000\004\034\066\001" +
    "\002\000\004\044\070\001\002\000\006\034\uffc7\050\uffc7" +
    "\001\002\000\004\026\071\001\002\000\004\044\072\001" +
    "\002\000\004\033\073\001\002\000\014\003\077\035\101" +
    "\040\074\044\100\053\075\001\002\000\006\035\101\053" +
    "\075\001\002\000\022\034\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\044\uffb8\050\uffb8\001\002\000\022\034" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9" +
    "\050\uffb9\001\002\000\016\034\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\044\uffbe\050\uffbe\001\002\000\012\003\077\035\101" +
    "\040\074\053\075\001\002\000\012\003\077\035\101\040" +
    "\074\053\075\001\002\000\022\034\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\044\uffbb\050\uffbb\001\002\000" +
    "\022\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\111\042\110" +
    "\044\uffbf\050\uffbf\001\002\000\012\034\uffc4\037\105\040" +
    "\106\050\uffc4\001\002\000\010\035\101\040\074\053\075" +
    "\001\002\000\010\035\101\040\074\053\075\001\002\000" +
    "\022\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041\111\042\110" +
    "\044\uffc0\050\uffc0\001\002\000\010\035\101\040\074\053" +
    "\075\001\002\000\010\035\101\040\074\053\075\001\002" +
    "\000\022\034\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\044\uffbd\050\uffbd\001\002\000\022\034\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc\050\uffbc\001" +
    "\002\000\022\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\111" +
    "\042\110\044\uffc1\050\uffc1\001\002\000\010\036\116\037" +
    "\105\040\106\001\002\000\022\034\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\044\uffb7\050\uffb7\001\002\000" +
    "\010\037\105\040\106\044\120\001\002\000\006\034\uffc5" +
    "\050\uffc5\001\002\000\022\034\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\044\uffba\050\uffba\001\002\000\006" +
    "\034\uffca\046\uffca\001\002\000\004\044\124\001\002\000" +
    "\004\033\125\001\002\000\014\003\077\035\101\040\074" +
    "\044\126\053\075\001\002\000\012\003\077\035\101\040" +
    "\074\053\075\001\002\000\012\034\uffc2\037\105\040\106" +
    "\050\uffc2\001\002\000\010\037\105\040\106\044\131\001" +
    "\002\000\006\034\uffc3\050\uffc3\001\002\000\004\044\133" +
    "\001\002\000\004\025\123\001\002\000\006\034\uffc8\050" +
    "\uffc8\001\002\000\004\047\056\001\002\000\004\046\uffcc" +
    "\001\002\000\004\033\140\001\002\000\004\045\141\001" +
    "\002\000\004\047\142\001\002\000\006\043\062\044\063" +
    "\001\002\000\006\034\146\046\uffd6\001\002\000\004\046" +
    "\145\001\002\000\006\034\uffd8\050\uffd8\001\002\000\004" +
    "\047\142\001\002\000\004\046\uffd7\001\002\000\004\034" +
    "\151\001\002\000\004\044\153\001\002\000\004\050\165" +
    "\001\002\000\004\030\154\001\002\000\004\044\155\001" +
    "\002\000\004\033\156\001\002\000\004\044\160\001\002" +
    "\000\004\050\uffd4\001\002\000\006\020\162\021\161\001" +
    "\002\000\004\044\164\001\002\000\004\044\163\001\002" +
    "\000\004\050\uffd3\001\002\000\004\050\uffd2\001\002\000" +
    "\006\034\uffd5\046\uffd5\001\002\000\004\033\167\001\002" +
    "\000\004\045\170\001\002\000\004\047\172\001\002\000" +
    "\006\034\177\046\uffcf\001\002\000\006\043\062\044\063" +
    "\001\002\000\004\046\174\001\002\000\006\034\uffd1\050" +
    "\uffd1\001\002\000\004\050\176\001\002\000\006\034\uffce" +
    "\046\uffce\001\002\000\004\047\172\001\002\000\004\046" +
    "\uffd0\001\002\000\004\033\202\001\002\000\004\047\203" +
    "\001\002\000\006\043\062\044\063\001\002\000\004\050" +
    "\205\001\002\000\006\034\uffc9\050\uffc9\001\002\000\004" +
    "\033\207\001\002\000\004\044\210\001\002\000\012\003" +
    "\077\035\101\040\074\053\075\001\002\000\010\037\105" +
    "\040\106\044\212\001\002\000\004\034\uffea\001\002\000" +
    "\004\033\214\001\002\000\004\044\215\001\002\000\012" +
    "\003\077\035\101\040\074\053\075\001\002\000\010\037" +
    "\105\040\106\044\217\001\002\000\004\034\uffeb\001\002" +
    "\000\004\033\221\001\002\000\004\047\222\001\002\000" +
    "\004\044\234\001\002\000\006\034\uffe6\050\uffe6\001\002" +
    "\000\006\034\310\050\uffe7\001\002\000\004\050\307\001" +
    "\002\000\006\034\uffe1\050\uffe1\001\002\000\006\034\uffe0" +
    "\050\uffe0\001\002\000\006\034\uffe2\050\uffe2\001\002\000" +
    "\006\034\uffe3\050\uffe3\001\002\000\006\034\uffe5\050\uffe5" +
    "\001\002\000\006\034\uffe4\050\uffe4\001\002\000\020\011" +
    "\235\012\240\013\242\014\243\015\237\016\236\017\241" +
    "\001\002\000\004\044\302\001\002\000\004\044\275\001" +
    "\002\000\004\044\270\001\002\000\004\044\263\001\002" +
    "\000\004\044\256\001\002\000\004\044\251\001\002\000" +
    "\004\044\244\001\002\000\004\033\245\001\002\000\004" +
    "\044\246\001\002\000\004\022\247\001\002\000\004\044" +
    "\250\001\002\000\006\034\uffdc\050\uffdc\001\002\000\004" +
    "\033\252\001\002\000\004\044\253\001\002\000\004\022" +
    "\254\001\002\000\004\044\255\001\002\000\006\034\uffdd" +
    "\050\uffdd\001\002\000\004\033\257\001\002\000\004\044" +
    "\260\001\002\000\004\022\261\001\002\000\004\044\262" +
    "\001\002\000\006\034\uffd9\050\uffd9\001\002\000\004\033" +
    "\264\001\002\000\004\044\265\001\002\000\004\022\266" +
    "\001\002\000\004\044\267\001\002\000\006\034\uffde\050" +
    "\uffde\001\002\000\004\033\271\001\002\000\004\044\272" +
    "\001\002\000\004\022\273\001\002\000\004\044\274\001" +
    "\002\000\006\034\uffdb\050\uffdb\001\002\000\004\033\276" +
    "\001\002\000\004\044\277\001\002\000\004\022\300\001" +
    "\002\000\004\044\301\001\002\000\006\034\uffda\050\uffda" +
    "\001\002\000\004\033\303\001\002\000\004\044\304\001" +
    "\002\000\004\022\305\001\002\000\004\044\306\001\002" +
    "\000\006\034\uffdf\050\uffdf\001\002\000\006\034\uffe9\050" +
    "\uffe9\001\002\000\004\044\234\001\002\000\004\050\uffe8" +
    "\001\002\000\004\044\314\001\002\000\004\050\ufff3\001" +
    "\002\000\014\010\035\024\042\027\041\031\043\032\040" +
    "\001\002\000\014\004\044\005\036\006\037\051\316\052" +
    "\317\001\002\000\004\044\326\001\002\000\004\044\320" +
    "\001\002\000\004\033\321\001\002\000\004\044\322\001" +
    "\002\000\004\023\323\001\002\000\004\044\324\001\002" +
    "\000\004\050\325\001\002\000\004\002\ufffa\001\002\000" +
    "\004\033\327\001\002\000\004\044\330\001\002\000\004" +
    "\007\331\001\002\000\004\044\332\001\002\000\004\050" +
    "\333\001\002\000\004\002\ufffb\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\014\002\003\003\004\004\006\051\007\052" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\016\036\014\037\013\041\020\042\017\001\001\000" +
    "\006\003\011\004\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\016\036\014\037" +
    "\013\041\020\042\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\022\011\032\012\024" +
    "\022\026\027\030\030\025\033\023\036\014\037\027\041" +
    "\020\042\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\056\032\054\001\001\000\002\001\001" +
    "\000\010\040\063\043\060\044\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\045\103\046" +
    "\102\047\101\050\075\001\001\000\004\050\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\116\046\102\047\101\050\075\001\001\000\012" +
    "\045\114\046\102\047\101\050\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\046\113" +
    "\047\101\050\075\001\001\000\010\046\106\047\101\050" +
    "\075\001\001\000\002\001\001\000\006\047\112\050\075" +
    "\001\001\000\006\047\111\050\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\045\126\046\102\047\101\050\075\001" +
    "\001\000\012\045\127\046\102\047\101\050\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\135\032\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\143\024\142" +
    "\001\001\000\010\040\147\043\060\044\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\146\024\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\172\035\170\001\001\000\002\001\001\000" +
    "\010\040\174\043\060\044\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\177\035\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\040\203\043\060\044" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\045\210\046\102\047" +
    "\101\050\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\045\215\046" +
    "\102\047\101\050\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\224\010\223\013\222\014\231\015\232\016\230\017\227" +
    "\020\225\021\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\310\010\223\013\222\014\231\015\232\016\230\017\227" +
    "\020\225\021\226\001\001\000\002\001\001\000\020\006" +
    "\022\011\312\012\024\022\026\027\030\030\025\033\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$WorldParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$WorldParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$WorldParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private Symbol cur_token;
        private boolean parsed;
        private List<World> worlds = new ArrayList<World>();
        private World worldd;
        private Config configg;
        public ValidarControl control = new ValidarControl();
        private String solicitudWorlds, selectWorld;

	public WorldParser(WorldLexer lex) {
                super(lex);
                // parsed
                this.parsed = true;
                System.out.println("--iniciando world--");
                this.worldd =  new World();
                this.configg = new Config();
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
                /* parsed */
                this.parsed = false;
                System.out.println("unrecovered_syntax_error");
                System.out.println("cur_token: " + symbl_name_from_id(cur_token.sym));
                control.error(cur_token.value.toString(), cur_token.left, cur_token.right, "report_fatal_error");
	}

	public void report_error(String message, Object info) {
                /* parsed */
                this.parsed = false;
                /**/
                System.out.println("report_error");
                System.out.println("Message: " + message);
                System.out.println("Object info: " + info);
                control.error(cur_token.value.toString(), cur_token.left, cur_token.right, "report_fatal_error");
        }

	public void report_fatal_error(String message, Object info) {
                /* parsed */
                this.parsed = false;
                System.out.println("report_fatal_error");
                System.out.println("Message: " + message);
                System.out.println("Object info: " + info);
                control.error(cur_token.value.toString(), cur_token.left, cur_token.right, "report_fatal_error");
        }

	public void syntax_error(Symbol cur_token) {
                /* parsed */
                this.parsed = false;

                /* Symbol que provoca sintax_error */
                this.cur_token = cur_token;
                control.error(cur_token.value.toString(), cur_token.left, cur_token.right, "report_fatal_error");
        }

	public Symbol getCur_token() {
                return this.cur_token;
        }

        protected int error_sync_size() {
                return 1;
	}

        /* Reports */
         public boolean isParsed() {
            return parsed;
        }
        public void setParsed(boolean estado){
                if(parsed)
                parsed = estado;
        }
        public void startWorld(){
                worldd.setConfig(configg);
                worlds.add(worldd);
                worldd =  new World();
                configg = new Config();
        }
        public String getSolicitudWolds(){
                return solicitudWorlds;
        }
        public List<World> getWorld(){
                return worlds;
        }
        public String getSelectWorld(){
                return selectWorld;
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$WorldParser$actions {
  private final WorldParser parser;

  /** Constructor */
  CUP$WorldParser$actions(WorldParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$WorldParser$do_action_part00000000(
    int                        CUP$WorldParser$act_num,
    java_cup.runtime.lr_parser CUP$WorldParser$parser,
    java.util.Stack            CUP$WorldParser$stack,
    int                        CUP$WorldParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$WorldParser$result;

      /* select the action based on the action number */
      switch (CUP$WorldParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // peticion ::= solicitud 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("peticion",0, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= peticion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		RESULT = start_val;
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$WorldParser$parser.done_parsing();
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // peticion ::= nivel 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("peticion",0, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // peticion ::= worlds 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("peticion",0, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // worlds ::= world worlds 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("worlds",1, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // worlds ::= world 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("worlds",1, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // solicitud ::= LKEY AP WORLDS AP POINTS AP ALL AP RKEY 
            {
              Object RESULT =null;
		 worlds = null;
                selectWorld = null;
                solicitudWorlds = "ALL"; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("solicitud",39, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-8)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nivel ::= LKEY AP WORLD AP POINTS AP NAMEW AP RKEY 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).value;
		 worlds = null;
                worldd = null;
                selectWorld = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("nivel",40, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-8)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // world ::= LKEY wd COMMA opcion RKEY 
            {
              Object RESULT =null;
		 startWorld(); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("world",2, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-4)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // wd ::= wd COMMA w 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("wd",3, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // wd ::= w 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("wd",3, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // w ::= name 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.worldConfig(worldd,n1,n1left,n1right,"name"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("w",29, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // w ::= rows 
            {
              String RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.worldConfig(worldd,n2+"",n2left,n2right,"rows"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("w",29, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // w ::= cols 
            {
              String RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.worldConfig(worldd,n3+"",n3left,n3right,"cols"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("w",29, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opcion ::= op COMMA opcion 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("opcion",7, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opcion ::= op 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("opcion",7, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op ::= config 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op ::= board 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op ::= boxes 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op ::= targets 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= player 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // name ::= AP NAME AP POINTS AP NAMEW AP 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("name",28, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rows ::= AP ROWS AP POINTS AP s AP 
            {
              Integer RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("rows",32, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cols ::= AP COLS AP POINTS AP s AP 
            {
              Integer RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n3; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("cols",31, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // config ::= AP CONFIG AP POINTS LKEY con RKEY 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("config",4, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // con ::= colorr COMMA con 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("con",5, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // con ::= colorr 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("con",5, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // colorr ::= box_color 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.colorConfig(configg,n1,n1left,n1right,"box_color"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("colorr",6, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // colorr ::= box_on_target_color 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.colorConfig(configg,n2,n2left,n2right,"box_on_target_color"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("colorr",6, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // colorr ::= target_color 
            {
              Object RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.colorConfig(configg,n3,n3left,n3right,"target_color"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("colorr",6, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // colorr ::= brick_color 
            {
              Object RESULT =null;
		int n4left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.colorConfig(configg,n4,n4left,n4right,"brick_color"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("colorr",6, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // colorr ::= hall_color 
            {
              Object RESULT =null;
		int n5left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.colorConfig(configg,n5,n5left,n5right,"hall_color"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("colorr",6, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // colorr ::= undefined_color 
            {
              Object RESULT =null;
		int n6left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.colorConfig(configg,n6,n6left,n6right,"undefined_color"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("colorr",6, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // colorr ::= player_color 
            {
              Object RESULT =null;
		int n7left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		String n7 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.colorConfig(configg,n7,n7left,n7right,"player_color"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("colorr",6, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // box_color ::= AP BOXC AP POINTS AP COLOR AP 
            {
              String RESULT =null;
		int n7left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n7 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n7; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("box_color",9, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // box_on_target_color ::= AP BOXCPOS AP POINTS AP COLOR AP 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("box_on_target_color",10, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // target_color ::= AP BOXCES AP POINTS AP COLOR AP 
            {
              String RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("target_color",11, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // brick_color ::= AP BRICKCOLOR AP POINTS AP COLOR AP 
            {
              String RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n3; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("brick_color",12, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // hall_color ::= AP HALLCOLOR AP POINTS AP COLOR AP 
            {
              String RESULT =null;
		int n4left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n4 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n4; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("hall_color",13, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // undefined_color ::= AP UNDEFINEDCOLOR AP POINTS AP COLOR AP 
            {
              String RESULT =null;
		int n5left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n5 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n5; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("undefined_color",14, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // player_color ::= AP PLAYERCOLOR AP POINTS AP COLOR AP 
            {
              String RESULT =null;
		int n6left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		String n6 = (String)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n6; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("player_color",15, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // board ::= AP BOARD AP POINTS LCORCH pieces RCORCH 
            {
              Object RESULT =null;
		System.out.println("--board--"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("board",16, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pieces ::= piece COMMA pieces 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("pieces",17, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pieces ::= piece 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("pieces",17, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // piece ::= LKEY posicion COMMA type RKEY 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-3)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 setParsed(control.boardValidar(worldd,new Piece(p.getPosX(),p.getPosY(),(String)h1), pleft, pright));  
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("piece",18, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-4)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= AP TYPE AP POINTS ty 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		RESULT = h1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-4)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ty ::= AP HALL AP 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = h1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("ty",20, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ty ::= AP BRICK AP 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = h2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("ty",20, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boxes ::= AP BOXES AP POINTS LCORCH box RCORCH 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("boxes",25, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // box ::= b COMMA box 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("box",26, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // box ::= b 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("box",26, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // b ::= LKEY posicion RKEY 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 setParsed(control.boxValidar(worldd ,new Box(p.getPosX(),p.getPosY()) ,pleft ,pright)); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("b",27, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // targets ::= AP TARGETS AP POINTS LCORCH target RCORCH 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("targets",22, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // target ::= tar COMMA target 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("target",23, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // target ::= tar 
            {
              Object RESULT =null;

              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("target",23, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tar ::= LKEY posicion RKEY 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 setParsed(control.targetValidar(worldd,new Target(p.getPosX(),p.getPosY()),pleft,pright)); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("tar",24, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // player ::= AP PLAYER AP POINTS LKEY posicion RKEY 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Posicion p = (Posicion)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		setParsed(control.playerValidar(worldd, new Player(p.getPosX(),p.getPosY()),pleft,pright)); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("player",21, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // posicion ::= posx COMMA posy 
            {
              Posicion RESULT =null;
		int nxleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).left;
		int nxright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).right;
		Integer nx = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).value;
		int nyleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int nyright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer ny = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		RESULT = new Posicion(nx,ny); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("posicion",30, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // posicion ::= posy COMMA posx 
            {
              Posicion RESULT =null;
		int nyleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).left;
		int nyright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).right;
		Integer ny = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).value;
		int nxleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int nxright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer nx = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		RESULT = new Posicion(nx,ny); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("posicion",30, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // posicion ::= ERROR 
            {
              Posicion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 control.error(e.toString(), eleft, eright, "Lex invalido"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("posicion",30, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // posx ::= AP POSX AP POINTS AP s AP 
            {
              Integer RESULT =null;
		int nx1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int nx1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Integer nx1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = nx1 ; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("posx",33, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // posx ::= AP POSX AP POINTS s 
            {
              Integer RESULT =null;
		int nx2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int nx2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer nx2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = nx2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("posx",33, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-4)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // posy ::= AP POSY AP POINTS AP s AP 
            {
              Integer RESULT =null;
		int ny1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int ny1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Integer ny1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = ny1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("posy",34, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-6)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // posy ::= AP POSY AP POINTS s 
            {
              Integer RESULT =null;
		int ny2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int ny2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer ny2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = ny2 ; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("posy",34, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-4)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // s ::= s PLUS t 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1 + n2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("s",35, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // s ::= s MINUS t 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1 - n2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("s",35, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // s ::= t 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("s",35, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // s ::= error 
            {
              Integer RESULT =null;
		 System.out.println("s ::= error"); 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("s",35, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // t ::= t TIMES u 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1 * n2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("t",36, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // t ::= t DIV u 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1 / n2; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("t",36, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // t ::= u 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("t",36, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // u ::= MINUS e 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT =  -n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("u",37, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // u ::= e 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("u",37, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // e ::= ENTERO 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("e",38, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // e ::= LPAREN s RPAREN 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-1)).value;
		 RESULT = n1; 
              CUP$WorldParser$result = parser.getSymbolFactory().newSymbol("e",38, ((java_cup.runtime.Symbol)CUP$WorldParser$stack.elementAt(CUP$WorldParser$top-2)), ((java_cup.runtime.Symbol)CUP$WorldParser$stack.peek()), RESULT);
            }
          return CUP$WorldParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$WorldParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$WorldParser$do_action(
    int                        CUP$WorldParser$act_num,
    java_cup.runtime.lr_parser CUP$WorldParser$parser,
    java.util.Stack            CUP$WorldParser$stack,
    int                        CUP$WorldParser$top)
    throws java.lang.Exception
    {
              return CUP$WorldParser$do_action_part00000000(
                               CUP$WorldParser$act_num,
                               CUP$WorldParser$parser,
                               CUP$WorldParser$stack,
                               CUP$WorldParser$top);
    }
}

}
